{"/home/travis/build/npmtest/node-npmtest-deamdify/test.js":"/* istanbul instrument in package npmtest_deamdify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-deamdify/lib.npmtest_deamdify.js":"/* istanbul instrument in package npmtest_deamdify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_deamdify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_deamdify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-deamdify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-deamdify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_deamdify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_deamdify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_deamdify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_deamdify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_deamdify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_deamdify.__dirname + '/lib.npmtest_deamdify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-deamdify/node_modules/deamdify/index.js":"/**\n * Module dependencies.\n */\nvar through = require('through')\n  , esprima = require('esprima')\n  , estraverse = require('estraverse')\n  , escodegen = require('escodegen')\n  , path = require('path')\n  , util = require('util')\n  , support = require('./support');\n\n\n/**\n * Transform AMD to CommonJS.\n *\n * This transform translates AMD modules into CommonJS modules.  AMD modules\n * are defined by calling the `define` function that is available as a free\n * or global variable.  The transform translates that call into traditional\n * CommonJS require statements.  Any value returned from the factory function\n * is assigned to `module.exports`.\n *\n * After the transform is complete, Browserify will be able to parse and\n * bundle the module as if it were a Node.js module.\n *\n * @param {String} file\n * @return {Stream}\n * @api public\n */\nmodule.exports = function (file, options) {\n  var data = '';\n  var ext = path.extname(file);\n  options = options || {};\n  options.extensions = options.extensions || ['.js'];\n\n  var stream = through(write, end);\n  return stream;\n\n  function write(buf) { data += buf }\n  function end() {\n    var ast\n      , isAMD = false\n      , isUMD = false\n      , supportsCommonJs = false;\n\n    if (options.extensions.indexOf(ext.toLowerCase()) > -1) {\n      try {\n        ast = esprima.parse(data)\n      } catch (error) {\n        throw new Error('Error deamdifying ' + file + ': ' + error);\n      }\n\n      //console.log('-- ORIGINAL AST --');\n      //console.log(util.inspect(ast, false, null));\n      //console.log('------------------');\n\n      // TODO: Ensure that define is a free variable.\n      estraverse.replace(ast, {\n        enter: function(node) {\n          if (isCommonJsCheck(node)) {\n            supportsCommonJs = true;\n          }\n          else if (!supportsCommonJs && isAMDCheck(node)) {\n            node.test = { type: 'Literal', value: true, raw: 'true' };\n            node.alternate = null;\n            isUMD = true;\n          }\n          else if (isDefine(node) || isAMDRequire(node)) {\n            if (isUMD) {\n              isAMD = true;\n              return;\n            }\n            var parents = this.parents();\n\n            // Check that this module is an AMD module, as evidenced by invoking\n            // `define` or `require([], fn)` at the top-level. Any CommonJS or\n            // UMD modules are pass through unmodified.`\n            if (parents.length == 2 && parents[0].type == 'Program' && parents[1].type == 'ExpressionStatement') {\n              isAMD = true;\n            }\n          }\n        },\n        leave: function(node) {\n          var tnode;\n          if (isAMD && (isDefine(node) || isAMDRequire(node))) {\n            //define({})\n            if (node.arguments.length == 1 &&\n                node.arguments[0].type == 'ObjectExpression') {\n              // object literal\n              var obj = node.arguments[0];\n\n              tnode = generateCommonJsModuleForObject(obj);\n              this.break();\n            } else\n            //define(function(){})\n            if (node.arguments.length == 1 &&\n                node.arguments[0].type == 'FunctionExpression') {\n              var dependenciesIds = extractDependencyIdsFromFactory(node.arguments[0]),\n                  factory = node.arguments[0];\n              tnode = generateCommonJsModuleForFactory(dependenciesIds, factory);\n              this.break();\n            } else\n            //define(variableName)\n            if (node.arguments.length == 1 &&\n                node.arguments[0].type == 'Identifier') {\n              // reference\n              var obj = node.arguments[0];\n\n              tnode = generateCommonJsModuleForObject(obj);\n            } else\n            //define([],function(){})\n            if (node.arguments.length == 2 &&\n                node.arguments[0].type == 'ArrayExpression' &&\n                (node.arguments[1].type == 'FunctionExpression' || node.arguments[1].type == 'Identifier')) {\n              var dependenciesIds = extractDependencyIdsFromArrayExpression(node.arguments[0], options.paths)\n                , factory = node.arguments[1];\n\n              tnode = generateCommonJsModuleForFactory(dependenciesIds, factory);\n              this.break();\n            } else\n            //define(\"a b c\".split(' '), function(){})\n            if (node.arguments.length == 2 &&\n                node.arguments[0].type == 'CallExpression' &&\n                (node.arguments[1].type == 'FunctionExpression' || node.arguments[1].type == 'Identifier')) {\n              try {\n                var dependenciesCode = node.arguments[0]\n                  , dependenciesIds = extractDependencyIdsFromCallExpression(dependenciesCode, options.paths)\n                  , factory = node.arguments[1];\n\n                tnode = generateCommonJsModuleForFactory(dependenciesIds, factory);\n                this.break();\n              } catch(e) {\n                console.log(\"failed to evaluate dependencies:\", dependenciesCode, e)\n              }\n            } else\n            //define('modulename',function(){})\n            if (node.arguments.length == 2 &&\n                node.arguments[0].type == 'Literal' &&\n                (node.arguments[1].type == 'FunctionExpression' || node.arguments[1].type == 'Identifier')) {\n              var dependenciesIds = extractDependencyIdsFromFactory(node.arguments[1])\n                , factory = node.arguments[1];\n\n              tnode = generateCommonJsModuleForFactory(dependenciesIds, factory);\n              this.break();\n            } else\n            //define('modulename', [], function(){})\n            if (node.arguments.length == 3 &&\n                node.arguments[0].type == 'Literal' &&\n                node.arguments[1].type == 'ArrayExpression' &&\n                (node.arguments[2].type == 'FunctionExpression' || node.arguments[2].type == 'Identifier')) {\n              var dependenciesIds = extractDependencyIdsFromArrayExpression(node.arguments[1], options.paths)\n                , factory = node.arguments[2];\n\n              tnode = generateCommonJsModuleForFactory(dependenciesIds, factory);\n              this.break();\n            } else\n            //define('modulename', \"a b c\".split(' '), function(){})\n            if (node.arguments.length == 3 &&\n                node.arguments[0].type == 'Literal' &&\n                node.arguments[1].type == 'CallExpression' &&\n                (node.arguments[2].type == 'FunctionExpression' || node.arguments[2].type == 'Identifier')) {\n              try {\n                var dependenciesCode = node.arguments[1]\n                  , dependenciesIds = extractDependencyIdsFromCallExpression(dependenciesCode, options.paths)\n                  , factory = node.arguments[2];\n\n                tnode = generateCommonJsModuleForFactory(dependenciesIds, factory);\n                this.break();\n              } catch(e) {\n                console.log(\"failed to evaluate dependencies:\", dependenciesCode, e)\n              }\n            }\n          }\n          return tnode;\n        }\n      });\n    }\n\n    if (!isAMD) {\n      stream.queue(data);\n      stream.queue(null);\n      return;\n    }\n\n    //console.log('-- TRANSFORMED AST --');\n    //console.log(util.inspect(ast, false, null));\n    //console.log('---------------------');\n\n    var out = escodegen.generate(ast);\n    stream.queue(out);\n    stream.queue(null);\n  }\n};\n\nfunction generateCommonJsModuleForObject(obj) {\n  return { type: 'AssignmentExpression',\n    operator: '=',\n    left:\n    { type: 'MemberExpression',\n      computed: false,\n      object: { type: 'Identifier', name: 'module' },\n      property: { type: 'Identifier', name: 'exports' } },\n    right: obj };\n}\n\nfunction extractDependencyIdsFromArrayExpression(dependencies, paths) {\n  return dependencies.elements.map(function(el) { return rewriteRequire(el.value, paths); });\n}\n\n\nfunction extractDependencyIdsFromCallExpression(callExpression, paths) {\n  var ids = eval(escodegen.generate(callExpression));\n  return ids.map(function(id) { return rewriteRequire(id, paths); });\n}\n\nfunction rewriteRequire(path, paths) {\n  var parts = path.split(\"/\");\n  var module = parts[0];\n  if(paths && module in paths) {\n    var rest = parts.slice(1, parts.length);\n    var rewrittenModule = paths[module];\n    return [rewrittenModule].concat(rest).join(\"/\")\n  } else {\n    return path;\n  }\n}\n\nfunction extractDependencyIdsFromFactory(factory) {\n  var parameters = factory.params.map(function(param){\n    if(param.type === 'Identifier') {\n      return param.name;\n    }\n  });\n\n  if(isCommonJsWrappingParameters(parameters)) {\n    return [];\n  } else {\n    return commonJsSpecialDependencies.slice(0, parameters.length);\n  }\n}\n\nfunction isCommonJsWrappingParameters(parameters) {\n  return parameters.length === commonJsSpecialDependencies.length\n        && parameters[0] === commonJsSpecialDependencies[0]\n        && parameters[1] === commonJsSpecialDependencies[1]\n        && parameters[2] === commonJsSpecialDependencies[2];\n}\n\nfunction generateCommonJsModuleForFactory(dependenciesIds, factory) {\n  var program,\n      exportResult = factory.type !== 'FunctionExpression' || support.doesFactoryHaveReturn(factory);\n  if(dependenciesIds.length === 0 && !exportResult) {\n    return {\n      \"type\": \"CallExpression\",\n      \"callee\": factory,\n      \"arguments\": [\n        { \"type\": \"Identifier\", \"name\": \"require\" },\n        { \"type\": \"Identifier\", \"name\": \"exports\" },\n        { \"type\": \"Identifier\", \"name\": \"module\" }\n      ]\n    };\n  } else {\n\n    var importExpressions = [];\n\n    //build imports\n    var imports;\n    if(dependenciesIds.length > 0) {\n        buildDependencyExpressions(dependenciesIds).forEach(function(expressions){\n            importExpressions.push(expressions.importExpression);\n        });\n    }\n\n    var callFactoryWithImports = {\n                \"type\": \"CallExpression\",\n                \"callee\": factory,\n                \"arguments\": importExpressions\n\n        };\n\n    var body;\n    if(exportResult) {\n      //wrap with assignment\n      body = {\n        \"type\": \"AssignmentExpression\",\n        \"operator\": \"=\",\n        \"left\": {\n          \"type\": \"MemberExpression\",\n          \"computed\": false,\n          \"object\": {\n            \"type\": \"Identifier\",\n            \"name\": \"module\"\n          },\n          \"property\": {\n            \"type\": \"Identifier\",\n            \"name\": \"exports\"\n          }\n        },\n        \"right\": callFactoryWithImports\n      };\n    } else {\n      body = callFactoryWithImports;\n    }\n\n    return body;\n  }\n}\n\n//NOTE: this is the order as specified in RequireJS docs; don't changes\nvar commonJsSpecialDependencies = ['require', 'exports', 'module'];\nfunction commonJsSpecialDependencyExpressionBuilder(dependencyId) {\n  if(commonJsSpecialDependencies.indexOf(dependencyId) !== -1) {\n    return {importExpression:{\n            \"type\": \"Identifier\",\n            \"name\": dependencyId\n        }\n    };\n  }\n}\n\nfunction defaultRequireDependencyExpressionBuilder(dependencyId) {\n  return {importExpression: {\n      \"type\": \"CallExpression\",\n      \"callee\": {\n          \"type\": \"Identifier\",\n          \"name\": \"require\"\n      },\n      \"arguments\": [\n          {\n              \"type\": \"Literal\",\n              \"value\": dependencyId\n          }\n      ]\n  }};\n}\n\nfunction buildDependencyExpressions(dependencyIdList) {\n  var dependencyExpressionBuilders = [\n    commonJsSpecialDependencyExpressionBuilder,\n    defaultRequireDependencyExpressionBuilder\n  ];\n\n  return dependencyIdList.map(function(dependencyId){\n    return dependencyExpressionBuilders.reduce(function(currentExpression, builder){\n        return currentExpression || builder(dependencyId);\n    },  null);\n  });\n}\n\nfunction buildVariableDeclaration(imports, loader) {\n  var declarations = [];\n  if (imports) {\n    declarations.push(imports);\n  }\n  declarations.push(loader);\n\n  return {\n    \"type\": \"VariableDeclaration\",\n    \"declarations\": declarations,\n    \"kind\": \"var\"\n  };\n}\n\nfunction isDefine(node) {\n  var callee = node.callee;\n  return callee\n    && node.type == 'CallExpression'\n    && callee.type == 'Identifier'\n    && callee.name == 'define'\n  ;\n}\n\nfunction isCommonJsCheck(node) {\n  if (typeof exports === 'object')\n  return node.type === 'IfStatement' &&\n    isTypeCheck(node.test);\n\n  function isTypeCheck(node) {\n    return node.type === 'BinaryExpression' &&\n      (node.operator === '===' || node.operator === '==') &&\n      isTypeof(node.left) &&\n      node.right.type === 'Literal' &&\n      node.right.value === 'object';\n  }\n\n  function isTypeof(node) {\n    return node.type === 'UnaryExpression' &&\n      node.operator === 'typeof' &&\n      node.argument.type === 'Identifier' &&\n      node.argument.name === 'exports';\n  }\n}\n\nfunction isAMDCheck(node) {\n  return node.type === 'IfStatement' &&\n    node.test.type === 'LogicalExpression' &&\n    isTypeCheck(node.test.left) &&\n    isAmdPropertyCheck(node.test.right);\n\n  function isTypeCheck(node) {\n    return node.type === 'BinaryExpression' &&\n      (node.operator === '===' || node.operator === '==') &&\n      isTypeof(node.left) &&\n      node.right.type === 'Literal' &&\n      node.right.value === 'function';\n  }\n\n  function isTypeof(node) {\n    return node.type === 'UnaryExpression' &&\n      node.operator === 'typeof' &&\n      node.argument.type === 'Identifier' &&\n      node.argument.name === 'define';\n  }\n\n  function isAmdPropertyCheck(node) {\n    return node.type === 'MemberExpression' &&\n      node.object.name === 'define' &&\n      node.property.name === 'amd';\n  }\n}\n\nfunction isAMDRequire(node) {\n  var callee = node.callee;\n  return callee\n    && node.type == 'CallExpression'\n    && callee.type == 'Identifier'\n    && callee.name == 'require'\n  ;\n}\n","/home/travis/build/npmtest/node-npmtest-deamdify/node_modules/deamdify/support.js":"var estraverse = require('estraverse')\n\nfunction doesFactoryHaveReturn(factory) {\n  var returnFound = false;\n  estraverse.traverse(factory.body, {\n    enter: function (node, parent) {\n        if (returnFound) {\n          this.break();\n        }\n\n        if (node.type == 'FunctionExpression' ||\n            node.type == 'FunctionDeclaration') {\n              this.skip();\n        }\n\n        if (node.type == 'ReturnStatement') {\n              returnFound = true;\n              this.break();\n        }\n    }\n  });\n\n  return returnFound;\n}\n\nmodule.exports = {\n  doesFactoryHaveReturn: doesFactoryHaveReturn\n};\n"}